/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace WisdOnChain {
  export type CourseStruct = {
    id: BigNumberish;
    content: string;
    courseName: string;
    createdAt: BigNumberish;
  };

  export type CourseStructOutput = [
    id: bigint,
    content: string,
    courseName: string,
    createdAt: bigint
  ] & { id: bigint; content: string; courseName: string; createdAt: bigint };

  export type UserStruct = {
    id: BigNumberish;
    content: string;
    createdAt: BigNumberish;
    role: BigNumberish;
    isExists: boolean;
  };

  export type UserStructOutput = [
    id: bigint,
    content: string,
    createdAt: bigint,
    role: bigint,
    isExists: boolean
  ] & {
    id: bigint;
    content: string;
    createdAt: bigint;
    role: bigint;
    isExists: boolean;
  };
}

export interface WisdOnChainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCourse"
      | "addUser"
      | "getCourse"
      | "getUser"
      | "getUsers"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CourseCreated"
      | "OwnershipTransferred"
      | "UserCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCourse",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addUser",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCourse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getUsers", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addCourse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCourse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace CourseCreatedEvent {
  export type InputTuple = [userAddress: AddressLike, courseName: string];
  export type OutputTuple = [userAddress: string, courseName: string];
  export interface OutputObject {
    userAddress: string;
    courseName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserCreatedEvent {
  export type InputTuple = [userAddress: AddressLike];
  export type OutputTuple = [userAddress: string];
  export interface OutputObject {
    userAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WisdOnChain extends BaseContract {
  connect(runner?: ContractRunner | null): WisdOnChain;
  waitForDeployment(): Promise<this>;

  interface: WisdOnChainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCourse: TypedContractMethod<
    [_courseName: string, _content: string],
    [void],
    "nonpayable"
  >;

  addUser: TypedContractMethod<
    [_content: string, _userRole: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCourse: TypedContractMethod<
    [_idCourse: BigNumberish],
    [WisdOnChain.CourseStructOutput],
    "view"
  >;

  getUser: TypedContractMethod<
    [_userAddress: AddressLike],
    [WisdOnChain.UserStructOutput],
    "view"
  >;

  getUsers: TypedContractMethod<[], [WisdOnChain.UserStructOutput[]], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCourse"
  ): TypedContractMethod<
    [_courseName: string, _content: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addUser"
  ): TypedContractMethod<
    [_content: string, _userRole: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCourse"
  ): TypedContractMethod<
    [_idCourse: BigNumberish],
    [WisdOnChain.CourseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUser"
  ): TypedContractMethod<
    [_userAddress: AddressLike],
    [WisdOnChain.UserStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUsers"
  ): TypedContractMethod<[], [WisdOnChain.UserStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CourseCreated"
  ): TypedContractEvent<
    CourseCreatedEvent.InputTuple,
    CourseCreatedEvent.OutputTuple,
    CourseCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UserCreated"
  ): TypedContractEvent<
    UserCreatedEvent.InputTuple,
    UserCreatedEvent.OutputTuple,
    UserCreatedEvent.OutputObject
  >;

  filters: {
    "CourseCreated(address,string)": TypedContractEvent<
      CourseCreatedEvent.InputTuple,
      CourseCreatedEvent.OutputTuple,
      CourseCreatedEvent.OutputObject
    >;
    CourseCreated: TypedContractEvent<
      CourseCreatedEvent.InputTuple,
      CourseCreatedEvent.OutputTuple,
      CourseCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "UserCreated(address)": TypedContractEvent<
      UserCreatedEvent.InputTuple,
      UserCreatedEvent.OutputTuple,
      UserCreatedEvent.OutputObject
    >;
    UserCreated: TypedContractEvent<
      UserCreatedEvent.InputTuple,
      UserCreatedEvent.OutputTuple,
      UserCreatedEvent.OutputObject
    >;
  };
}
